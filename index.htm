<!DOCTYPE html>
<html>
<head>
  <title>Adobe Sign Form Data</title>
</head>
<body>
  <div id="formDataContainer">Loading...</div>

  <script>
    // Role ID to Name Mapping
    const roleMap = {
      "162513": "Attorney",
      "162515": "Court",
      "162516": "Court Investigator",
      "162518": "Foster/Pre-Adoptive Caregiver",
      "162519": "Guardian Ad Litem",
      "162521": "Other",
      "169215": "Parent/Guardian",
      "162520": "Probation",
      "162517": "Youth/Young Adult",
      "169256": "DCF Fair Hearing Staff",
      "169233": "Juvenile Court Clinician"
    };

    // Office ID to Name Mapping
    const officeMap = {
      "1795": "Boston Regional Office",
      "1774": "Central MA Regional Office",
      "1778": "Northern Regional Office",
      "1788": "Southern Regional Office",
      "1769": "Western Regional Office",
      "1770": "Berkshire Area Office",
      "1790": "Brockton Area Office",
      "1786": "Cambridge-Burlington Area Office",
      "153914": "Cape Ann Area Office",
      "1793": "Cape Cod Area Office",
      "49949": "Coastal Area Office",
      "1791": "Fall River Area Office",
      "1785": "Framingham Area Office",
      "1785": "Framingham Area Office",
      "1781": "Greater Haverhill Area Office",
      "1779": "Greater Lowell Area Office",
      "1759": "Greater Waltham Area Office",
      "1771": "Greenfield Area Office",
      "1800": "Harbor Area Office",
      "1772": "Holyoke Area Office",
      "1796": "Hyde Park Area Office",
      "1797": "Jackson Square Area Office",
      "1780": "Lawrence Area Office",
      "1783": "Lynn Area Office",
      "1784": "Metro North Area Office",
      "1792": "New Bedford Area Office",
      "1775": "North Central Area Office",
      "1799": "Park St. Area Office",
      "153195": "Plymouth Area Office",
      "147764": "Robert Van Wart Area Office",
      "1776": "South Central Area Office",
      "1773": "Springfield Area Office",
      "1789": "Taunton/Attleboro Area Office",
      "182293": "Worcester East Area Office",
      "182294": "Worcester West Area Office",
      "50213": "Boston Legal Office",
      "96077": "Central Legal Office",
      "45845": "Metro Legal Office",
      "96075": "Northern Legal DSS Office",
      "96076": "Southern Legal Office",
      "96073": "Western Legal Office",
      "50212": "Office of the General Counsel"
    };

    const urlParams = new URLSearchParams(window.location.search);
    const documentKey = urlParams.get("documentKey");
    const agreementStatus = urlParams.get("agreementStatus");
    const container = document.getElementById("formDataContainer");
    if (!documentKey) {
    if (agreementStatus === "completed") {
      container.innerText = "Document Signed Successfully.";
    } else {
      container.innerText = "Missing documentKey in URL.";
    }
    throw new Error("Missing documentKey");
  }

    const backendUrl = `https://596f-103-121-27-98.ngrok-free.app/esignature/api/webform/formdata?documentKey=${encodeURIComponent(documentKey)}`;

    fetch(backendUrl, {
      method: "GET",
      headers: {
        "Accept": "application/json",
        "ngrok-skip-browser-warning": "true"
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      const container = document.getElementById("formDataContainer");

      if (!data || Object.keys(data).length === 0) {
        container.innerText = "No form data found.";
        return;
      }

      const name = data.name || "Requester";
      const email = data.email || "Not Provided";
      const caseId = data.caseId || "Not Provided";
      const officeName = officeMap[data.office] || `Office ID: ${data.office}`;
      const roleName = roleMap[data.role] || `Role ID: ${data.role}`;

     const completedDateStr = data.completed;
let submittedAt = "Unknown";

if (completedDateStr) {
  // Convert to ISO format by replacing space with 'T'
  const parsedDate = new Date(completedDateStr.replace(" ", "T"));
  
  if (!isNaN(parsedDate)) {
    submittedAt = parsedDate.toLocaleString("en-US", {
      month: "short",
      day: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      hour12: true
    });
  }
}

      container.innerHTML = `
        <p>Thank you, <strong>${name}</strong>,Your request was successfully submitted to the Department of Children and Families on <strong>${submittedAt}</strong>.</p>
        <p><strong>Requestor Email:</strong> ${email}</p>
        <p><strong>Requestor Role:</strong> ${roleName}</p>
        <p><strong>DCF Office:</strong> ${officeName}</p>
        <p><strong>DCF Case ID:</strong> ${caseId}</p>
        <br />
        <p>A member of our team will reach out with any questions. Please note that Personal Record Requests may take a minimum of 30â€“60 days to process. If you require proof of your submission, please print a copy of this page for your records.</p>
        <p>Thank You</p>
      `;
    })
    .catch(error => {
      console.error("Error fetching form data from backend:", error);
      document.getElementById("formDataContainer").innerText = "Could not load form data.";
    });
  </script>
</body>
</html>
